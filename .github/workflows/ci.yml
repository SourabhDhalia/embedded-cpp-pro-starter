name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-analyze:
    name: Build/Test/Analyze (${{ matrix.cxx }}-${{ matrix.type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cxx: [gcc, clang]
        type: [Debug, Release]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang clang-tidy cppcheck clang-format gcovr
      - name: Configure
        env:
          CXX: ${{ matrix.cxx == 'gcc' && 'g++' || 'clang++' }}
          CC:  ${{ matrix.cxx == 'gcc' && 'gcc'  || 'clang'   }}
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DBUILD_TESTS=ON
      - name: Build
        run: cmake --build build -j
      - name: Unit tests
        run: ctest --test-dir build --output-on-failure
      - name: clang-format check
        run: |
          FILES=$(git ls-files '*.c' '*.cpp' '*.h' '*.hpp');
          if [ -n "$FILES" ]; then clang-format -style=file --Werror --dry-run $FILES; fi
      - name: cppcheck
        run: |
          cppcheck --enable=all --inline-suppr --error-exitcode=1 --std=c++17 -I include \
            --suppress=unusedFunction --suppress=missingIncludeSystem \
            -isrc/firmware src 2> cppcheck-report.txt || (cat cppcheck-report.txt; exit 1)
      - name: clang-tidy
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DBUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          FILES=$(git ls-files '*.cpp' ':(exclude)src/firmware/**'); if [ -n "$FILES" ]; then clang-tidy -p build $FILES; fi
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.cxx }}-${{ matrix.type }}
          path: |
            build/host_app
            build/unit_tests

  dev-container:
    name: Dev Container Build/Test/Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build dev image
        run: docker build -f Dockerfile.dev -t embedded-dev .
      - name: Build (host)
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc "scripts/build.sh"
      - name: Test (host)
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc "scripts/test.sh"
      - name: clang-format check
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc 'FILES=$(git ls-files "*.c" "*.cpp" "*.h" "*.hpp"); if [ -n "$FILES" ]; then clang-format -style=file --Werror --dry-run $FILES; fi'
      - name: Static analysis (cppcheck/clang-tidy)
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc "scripts/analyze.sh"
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-container
          path: |
            build/host_app
            build/unit_tests

  coverage:
    name: Coverage (gcc)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y cmake ninja-build g++ gcovr
      - name: Configure (coverage)
        env: { CC: gcc, CXX: g++ }
        run: cmake -S . -B build-cov -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON
      - name: Build
        run: cmake --build build-cov -j
      - name: Test
        run: ctest --test-dir build-cov --output-on-failure
      - name: Generate coverage report
        run: |
          gcovr -r . -e 'tests/.*' --xml-pretty -o build-cov/coverage.xml --html-details build-cov/coverage.html --print-summary
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: build-cov/coverage.*

  cross-compile:
    name: Cross-compile Core (ARM GCC in dev container)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build dev image
        run: docker build -f Dockerfile.dev -t embedded-dev .
      - name: Configure (ARM toolchain)
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc "cmake -S . -B build-arm -G Ninja -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/arm-gcc.cmake -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release"
      - name: Build core library (ARM)
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            embedded-dev bash -lc "cmake --build build-arm --target core -j"
      - name: Upload ARM core library
        uses: actions/upload-artifact@v4
        with:
          name: core-arm
          path: build-arm/libcore.a
